{"version":3,"sources":["components/instructions/instructions.js","components/Range/Range.js","components/button/button.js","components/view/view.js","App.js","serviceWorker.js","index.js"],"names":["Instructions","className","Range","min","max","minChange","maxChange","type","value","onChange","id","required","Generate","currentClick","onClick","View","showNum","Generator","props","btnClick","state","minNum","maxNum","Math","ceil","floor","x","random","setState","onView","minRangeInputChange","event","typeNum","parseInt","target","numLength","length","maxRangeInputChange","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAYeA,G,MAVM,WACpB,OACC,yBAAKC,UAAU,gBACf,6EAAkD,6BAAlD,wDC0BaC,EA7BD,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,IAAKC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UACrC,OACC,yBAAKL,UAAU,SACd,yBAAKA,UAAU,WACf,uCACC,2BACAM,KAAK,SACLJ,IAAI,IACJC,IAAI,UACJI,MAAOL,EACPM,SAAUJ,EACVK,GAAG,WACHC,UAAQ,KAET,yBAAKV,UAAU,WACf,uCACC,2BACAM,KAAK,SACLJ,IAAI,IACJC,IAAI,UACJI,MAAOJ,EACPK,SAAUH,EACVI,GAAG,WACHC,UAAQ,OCVGC,EAbE,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACC,yBAAKZ,UAAU,WACf,4BACAM,KAAK,SACLN,UAAU,UACVa,QAASD,GAHT,cCKaE,EARF,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACf,OACC,yBAAKf,UAAU,QACf,4BAAKe,KC+DQC,E,YA5DZ,WAAaC,GAAQ,IAAD,8BACnB,4CAAMA,KAQNC,SAAW,WAAO,IAAD,EACY,EAAKC,MAAxBC,EADO,EACPA,OAAQC,EADD,EACCA,OACVnB,EAAMoB,KAAKC,KAAKH,GAChBjB,EAAMmB,KAAKE,MAAMH,GACjBI,EAAIH,KAAKE,MAAMF,KAAKI,UAAYvB,EAAMD,EAAM,IAAMA,EACxD,OAAO,EAAKyB,SAAS,CAAEC,OAASH,KAdf,EAiBnBI,oBAAsB,SAACC,GAAW,IACxBT,EAAW,EAAKF,MAAhBE,OACFU,EAAUC,SAASF,EAAMG,OAAO1B,MAAO,IACzC2B,EAAYJ,EAAMG,OAAO1B,MAAM4B,OAC9BJ,EAAUV,EACT,EAAKM,SAAS,CAAEP,OAAQC,IAClBa,EAAY,EAClBA,GAAwB,EAExB,EAAKP,SAAS,CAAEP,OAAQW,KA1Bb,EA8BnBK,oBAAsB,SAACN,GAAW,IACxBV,EAAW,EAAKD,MAAhBC,OACFW,EAAUC,SAASF,EAAMG,OAAO1B,MAAO,IACzC2B,EAAYJ,EAAMG,OAAO1B,MAAM4B,OAC9BJ,EAAUX,EACX,EAAKO,SAAS,CAAEN,OAAQD,IACjBc,EAAY,EACnBA,GAAwB,EAExB,EAAKP,SAAS,CAAEN,OAAQU,KArC9B,EAAKZ,MAAQ,CACTS,OAAQ,IACRR,OAAQ,EACRC,OAAQ,KALO,E,sEA4CrB,OACE,yBAAKrB,UAAU,aACf,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEG,IAAKkC,KAAKlB,MAAME,OAChBnB,IAAKmC,KAAKlB,MAAMC,OAChBhB,UAAWiC,KAAKR,oBAChBxB,UAAWgC,KAAKD,sBAElB,kBAAC,EAAD,CAAUxB,aAAcyB,KAAKnB,WAC7B,kBAAC,EAAD,CAAMH,QAASsB,KAAKlB,MAAMS,c,GAvDNU,IAAMC,WCKVC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAeC,SAASC,eAAe,SD6HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.4349b023.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Instructions = () => {\r\n\treturn (\r\n\t\t<div className=\"Instructions\">\r\n\t\t<p>Set a range for minimun & maximun number value.<br />\r\n\t\tThen click \"generate\" to receive a random number. \r\n\t\t</p>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Instructions;","import React from \"react\";\r\n\r\nconst Range = ({ min, max, minChange, maxChange }) => {\r\n\treturn (\r\n\t\t<div className=\"range\">\r\n\t\t\t<div className='min-div'>\r\n\t\t\t<h2>Minimum</h2>\r\n\t\t\t\t<input \r\n\t\t\t\ttype=\"number\" \r\n\t\t\t\tmin=\"0\"\r\n\t\t\t\tmax=\"9999999\"\r\n\t\t\t\tvalue={min} \r\n\t\t\t\tonChange={minChange}\r\n\t\t\t\tid=\"minInput\"\r\n\t\t\t\trequired/>\r\n\t\t\t</div>\r\n\t\t\t<div className='max-div'>\r\n\t\t\t<h2>Maximum</h2>\r\n\t\t\t\t<input \r\n\t\t\t\ttype=\"number\" \r\n\t\t\t\tmin=\"1\"\r\n\t\t\t\tmax=\"9999999\"\r\n\t\t\t\tvalue={max}\r\n\t\t\t\tonChange={maxChange}\r\n\t\t\t\tid=\"maxInput\"\r\n\t\t\t\trequired/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Range;","import React from \"react\";\r\n\r\nconst Generate = ({ currentClick }) => {\r\n\treturn (\r\n\t\t<div className=\"gen-box\">\r\n\t\t<button \r\n\t\ttype=\"button\" \r\n\t\tclassName=\"gen-btn\" \r\n\t\tonClick={currentClick}>\r\n\t\tgenerate \r\n\t\t</button>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Generate;","import React from \"react\";\r\n\r\nconst View = ({ showNum }) => {\r\n\treturn (\r\n\t\t<div className=\"view\">\r\n\t\t<h1>{showNum}</h1>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default View;","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Instructions from \"./components/instructions/instructions\";\r\nimport Range from \"./components/Range/Range\";\r\nimport Generate from \"./components/button/button\";\r\nimport View from \"./components/view/view\";\r\n\r\nclass Generator extends React.Component {\r\n  \tconstructor (props) {\r\n  \t\tsuper(props)\r\n  \t\tthis.state = {\r\n        onView: '0',\r\n        minNum: 0,\r\n        maxNum: 100\r\n      } \r\n  \t}\r\n\r\n    btnClick = () => {\r\n      const { minNum, maxNum } = this.state;\r\n      const min = Math.ceil(minNum);\r\n      const max = Math.floor(maxNum);\r\n      const x = Math.floor(Math.random() * (max - min + 1)) + min;\r\n      return this.setState({ onView : x });\r\n    }\r\n\r\n    minRangeInputChange = (event) => {\r\n      const { maxNum } = this.state;\r\n      const typeNum = parseInt(event.target.value, 10)\r\n      let numLength = event.target.value.length;\r\n       if (typeNum > maxNum) {\r\n            this.setState({ minNum: maxNum });\r\n       } else if (numLength > 7) {\r\n            numLength = numLength - 1\r\n       } else {\r\n            this.setState({ minNum: typeNum });\r\n      }\r\n    }\r\n\r\n    maxRangeInputChange = (event) => {\r\n      const { minNum } = this.state;\r\n      const typeNum = parseInt(event.target.value, 10)\r\n      let numLength = event.target.value.length;\r\n       if (typeNum < minNum) {\r\n          this.setState({ maxNum: minNum});\r\n      } else if (numLength > 7) {\r\n          numLength = numLength - 1\r\n      } else {\r\n          this.setState({ maxNum: typeNum })\r\n      }\r\n    }\r\n\r\n  render() {\r\n  return (\r\n    <div className=\"container\">\r\n    <Instructions />\r\n    <Range \r\n      max={this.state.maxNum} \r\n      min={this.state.minNum} \r\n      minChange={this.minRangeInputChange}\r\n      maxChange={this.maxRangeInputChange}\r\n      />\r\n    <Generate currentClick={this.btnClick}/>\r\n    <View showNum={this.state.onView}/>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Generator;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Generator from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Generator />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}