{"version":3,"sources":["components/instructions/instructions.js","components/button/button.js","components/view/view.js","App.js","serviceWorker.js","index.js"],"names":["Instructions","className","Generate","props","handleClick","currentClick","type","onClick","this","React","Component","View","show","Generator","btnClick","x","Math","ceil","random","setState","onView","state","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAWeA,G,MATM,WAEpB,OACC,yBAAKC,UAAU,gBACf,sECoBaC,E,YAvBd,WAAYC,GAAQ,IAAD,8BAChB,4CAAMA,KAGNC,YAAc,WACb,EAAKD,MAAME,gBALI,E,sEAUnB,OACC,yBAAKJ,UAAU,WACf,4BACAK,KAAK,SACLL,UAAU,UACVM,QAASC,KAAKJ,aAHd,iB,GAbqBK,IAAMC,WCSdC,EATF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAEf,OACC,yBAAKX,UAAU,QACf,4BAAKW,KC0BQC,EAzBf,YACG,WAAaV,GAAQ,IAAD,8BACnB,4CAAMA,KAMJW,SAAW,WACX,IAAIC,EAAIC,KAAKC,KAAKD,KAAKC,KAAKD,KAAKE,UAAYF,KAAKE,UAClD,EAAKC,SAAS,CAAEC,OAASL,KAP3B,EAAKM,MAAQ,CACTD,OAAQ,KAHO,EADvB,sEAeE,OACE,yBAAKnB,UAAU,aACf,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUI,aAAcG,KAAKM,WAC7B,kBAAC,EAAD,CAAMF,KAAMJ,KAAKa,MAAMD,cAnB3B,GAA+BX,IAAMC,WCKjBY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAeC,SAASC,eAAe,SD6HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6969f743.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Instructions = () => {\r\n\t\r\n\treturn (\r\n\t\t<div className=\"Instructions\">\r\n\t\t<p>Click \"generate\" for a random number</p>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Instructions;","import React from \"react\";\r\n\r\nclass Generate extends React.Component {\r\n\tconstructor(props) {\r\n  \t\tsuper(props)\r\n  \t\t}\r\n\r\n  \t\thandleClick = () => {\r\n  \t\t\tthis.props.currentClick();\r\n  \t\t}\r\n\r\n  \trender() {\r\n\r\n\treturn (\r\n\t\t<div className=\"gen-box\">\r\n\t\t<button \r\n\t\ttype=\"button\" \r\n\t\tclassName=\"gen-btn\" \r\n\t\tonClick={this.handleClick}>\r\n\t\tgenerate \r\n\t\t</button>\r\n\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Generate;","import React from \"react\";\r\n\r\nconst View = ({ show }) => {\r\n\t\r\n\treturn (\r\n\t\t<div className=\"view\">\r\n\t\t<h1>{show}</h1>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default View;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport Instructions from \"./components/instructions/instructions\";\nimport Generate from \"./components/button/button\";\nimport View from \"./components/view/view\";\n\nexport class Generator extends React.Component {\n  \tconstructor (props) {\n  \t\tsuper(props)\n  \t\tthis.state = { \n        onView: '0' \n      }  \n  \t}\n\n      btnClick = () => {\n      var x = Math.ceil(Math.ceil(Math.random()) / Math.random());\n      this.setState({ onView : x });\n     }\n\n  render() {\n      \n  return (\n    <div className=\"container\">\n    <Instructions />\n    <Generate currentClick={this.btnClick}/>\n    <View show={this.state.onView}/>\n    </div>\n    );\n  }\n}\n\nexport default Generator;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Generator from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Generator />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}